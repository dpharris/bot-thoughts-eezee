#summary Easy programming and prototyping with 14-pin SOIC ATtiny841.

<img src="https://d3ffynyi1lxfcp.cloudfront.net/thumbs/products/522/2013-10-22-17-56-53/IMG_8198.JPG.620x349_q85_crop-smart.jpg" align="right" width="400" />

= Introduction =

Now you can use the new, powerful ATtiny841 on your breadboard.

= Features =

  * ATtiny841, 8KB flash, 512B RAM, 512B EEPROM
    * 2 Full Duplex USARTs with Start Frame Detection
    * 1 Master/Slave SPI Serial Interface
    * 1 Slave I2C Serial Interface
    * 1 8-bit (2) 16-bit Timer/Counters w/ (2) PWM Channels,
    * 10-bit Analog to Digital Converter with
      * 12 External and 5 Internal, Single-ended Input Channels
      * 46 Differential ADC Channel Pairs with Programmable Gain (1x / 20x / 100x)
    * 2 On-chip Analog Comparators
  * AVR ISP header included to save time
  * All 14 pins exposed
  * Included 16MHz crystal and caps++
  * 0.1uF and 10uF (or larger) filtering capacitors
  * Reset switch and pull-up resistor included
  * Compact board

++ You can order it without these if you want

= Assembly =

  * Solder on each 10-pin header
  * Solder on the 2x3-pin AVR ISP pin header on top
  * Solder on the reset switch

= Writing Software =

To write code for ATtiny, you can use:

 * [http://www.atmel.com/tools/STUDIOARCHIVE.aspx AVR Studio]
 * [http://www.atmel.com/microsite/atmel_studio6/ Atmel Studio]
 * Eclipse and the [http://avr-eclipse.sourceforge.net/wiki/index.php/The_AVR_Eclipse_Plugin AVR Plugin]
 * Arduino IDE? Not yet. Someone has to write a core for this chip

= Programming (Flashing) Your Chip =

I use and recommend the following:

 * [http://www.pololu.com/product/1300 pololu.com Pololu AVR Programmer]. Follow the instructions in the [http://www.pololu.com/docs/0J36 User's Guide pdf]
 * AVR Dragon

You can also use an AVRISP MkII, your Arduino ([http://arduino.cc/en/Tutorial/ArduinoISP here's how]), or other AVR ISP compatible hardware.

== ISP Header ==

When it's time to plug in the eeZee Tiny board, locate the white rectangle next to the ISP header which marks the notch that would appear on a shrouded male header, as below.

[http://www.batsocks.co.uk/img/info_isp/ISP%206%20way%20pinout.png] 

= Example Code =

This example implements a Larson scanner, individually turning on pins PA0-7, PB0-2. Connect LEDs and enjoy the light show. Source: [https://code.google.com/p/bot-thoughts-eezee/source/browse/trunk/eeZeeTiny841/firmware/larson/larson.c larson.c]. Binary: [https://code.google.com/p/bot-thoughts-eezee/source/browse/trunk/eeZeeTiny841/firmware/larson/larson.hex larson.hex]

{{{
/** ATtiny84 test
 * 
 * Author: Michael Shimniok (www.bot-thoughts.com)
 * Description: Sequentially turns on a single pin on PA0-7 and PB0-2 (PB3 is reset)
 *
 */
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

int main()
{ 
  char i;
  
  PORTA=0;
  PORTB=0;
  DDRA=0xff;   // All PORTA as output
  DDRB=0x07;   // PB0-2, PB3 is reset
  
  while (1) {
    for (i = 0 ; i < 8; i++) {
      PORTA = (1 << i);
      _delay_ms(300);
    }
    PORTA = 0;
    
    for (i = 2; i < 3; i++) {
      PORTB = (1 << i);
      _delay_ms(300);
    }
    PORTB = 0;
  }

}
}}}

= Operating Conditions =

Please use your ATtiny breakout boards with regulated supplies of 5V or less, with minimal ripple, at temperatures around 25C (77F). Do not use the boards in higher temperature conditions.

= Source =
  * [https://code.google.com/p/bot-thoughts-eezee/source/browse/#svn%2Ftrunk%2FeeZeeTiny841 source] 
  * [https://code.google.com/p/bot-thoughts-eezee/source/browse/#svn%2Ftrunk%2FeeZeeTiny841%2Felectronics electronics] 
  * [https://code.google.com/p/bot-thoughts-eezee/source/browse/#svn%2Ftrunk%2FeeZeeTiny841%2Ffirmware firmware demos] 